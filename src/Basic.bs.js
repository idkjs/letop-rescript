// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Stdlib = require("bs-platform/lib/js/stdlib.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function let$dotopt(x, f) {
  if (x !== undefined) {
    return Curry._1(f, Caml_option.valFromOption(x));
  }
  
}

function let$dot$ampopt(x, f) {
  if (x !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(x)));
  }
  
}

function and$dotopt(a, b) {
  if (a !== undefined && b !== undefined) {
    return [
            Caml_option.valFromOption(a),
            Caml_option.valFromOption(b)
          ];
  }
  
}

function let$dotforce(v, fin) {
  if (v.TAG === /* Ok */0) {
    return Curry._1(fin, v._0);
  } else {
    return Stdlib.failwith("Force unwrapping an Error'd Result");
  }
}

var z = "";

var x = let$dotopt(1, (function (a) {
        var left = and$dotopt(2, 3);
        return let$dotopt(and$dotopt(left, 4), (function (param) {
                      var match = param[0];
                      return [
                              a,
                              match[0],
                              match[1],
                              param[1]
                            ];
                    }));
      }));

var x2 = let$dotopt("1", (function (a) {
        var left = and$dotopt("2", "3");
        return let$dotopt(and$dotopt(left, "4"), (function (param) {
                      var match = param[0];
                      return [
                              a,
                              match[0],
                              match[1],
                              param[1]
                            ];
                    }));
      }));

var left = and$dotopt(1, undefined);

var y = let$dotopt(and$dotopt(left, 4), (function (param) {
        var match = param[0];
        return [
                match[0],
                match[1],
                param[1]
              ];
      }));

var f = "";

console.log([
      1,
      2,
      3,
      4
    ]);

console.log(x);

console.log(x2);

console.log(f);

if (!Caml_obj.caml_equal(x, [
        1,
        2,
        3,
        4
      ])) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Basic.re",
          55,
          0
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(x2, [
        "1",
        "2",
        "3",
        "4"
      ])) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Basic.re",
          56,
          0
        ],
        Error: new Error()
      };
}

if (y !== undefined) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Basic.re",
          57,
          0
        ],
        Error: new Error()
      };
}

console.log("Success");

exports.let$dotopt = let$dotopt;
exports.let$dot$ampopt = let$dot$ampopt;
exports.and$dotopt = and$dotopt;
exports.let$dotforce = let$dotforce;
exports.z = z;
exports.x = x;
exports.x2 = x2;
exports.y = y;
exports.f = f;
/* x Not a pure module */
