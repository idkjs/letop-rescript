// Generated by Melange
'use strict';

var Util = require("./Util.bs.js");
var Stdlib = require("bs-platform/lib/js/stdlib.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

var sampleInput = "\"ecl:gry pid:860033327 eyr:2020 hcl:#fffffd byr:1937 iyr:2017 cid:147 hgt:183cm\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884 hcl:#cfa07d byr:1929\nhcl:#ae17e1 iyr:2013 eyr:2024 ecl:brn pid:760753108 byr:1931 hgt:179cm\nhcl:#cfa07d eyr:2025 pid:166559648 iyr:2011 ecl:brn hgt:59in\"";

var input = Util.readInput(2020, 4);

function make(s) {
  var tokens = s.split(" ");
  var kv = Belt_MapString.fromArray(Belt_Array.map(tokens, (function (token) {
              var res = token.split(":");
              return [
                      res[0],
                      res[1]
                    ];
            })));
  return Belt_Option.flatMap(Belt_MapString.get(kv, "byr"), (function (byr) {
                return Belt_Option.flatMap(Belt_MapString.get(kv, "iyr"), (function (iyr) {
                              return Belt_Option.flatMap(Belt_MapString.get(kv, "eyr"), (function (eyr) {
                                            return Belt_Option.flatMap(Belt_MapString.get(kv, "hgt"), (function (hgt) {
                                                          return Belt_Option.flatMap(Belt_MapString.get(kv, "hcl"), (function (hcl) {
                                                                        return Belt_Option.flatMap(Belt_MapString.get(kv, "ecl"), (function (ecl) {
                                                                                      return Belt_Option.flatMap(Belt_MapString.get(kv, "pid"), (function (pid) {
                                                                                                    var cid = Belt_MapString.get(kv, "cid");
                                                                                                    return {
                                                                                                            byr: byr,
                                                                                                            iyr: iyr,
                                                                                                            eyr: eyr,
                                                                                                            hgt: hgt,
                                                                                                            hcl: hcl,
                                                                                                            ecl: ecl,
                                                                                                            pid: pid,
                                                                                                            cid: cid
                                                                                                          };
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

var Passport = {
  make: make
};

function parseByr(s) {
  var v = Caml_format.caml_int_of_string(s);
  if (v >= 1920 && v <= 2002) {
    return {
            TAG: /* BirthYear */0,
            _0: v
          };
  }
  
}

function parseIyr(s) {
  var v = Caml_format.caml_int_of_string(s);
  if (v >= 2010 && v <= 2020) {
    return {
            TAG: /* IssueYear */1,
            _0: v
          };
  }
  
}

function parseEyr(s) {
  var v = Caml_format.caml_int_of_string(s);
  if (v >= 2020 && v <= 2030) {
    return {
            TAG: /* IssueYear */1,
            _0: v
          };
  }
  
}

function parseHgt(s) {
  var match = s.substr(-2);
  var match$1 = Stdlib.int_of_string_opt(s.substr(0, s.length - 2 | 0));
  switch (match) {
    case "cm" :
        if (match$1 !== undefined && match$1 >= 150 && match$1 <= 193) {
          return {
                  TAG: /* Height */3,
                  _0: {
                    TAG: /* Cm */1,
                    _0: match$1
                  }
                };
        } else {
          return ;
        }
    case "in" :
        if (match$1 !== undefined && match$1 >= 59 && match$1 <= 76) {
          return {
                  TAG: /* Height */3,
                  _0: {
                    TAG: /* In */0,
                    _0: match$1
                  }
                };
        } else {
          return ;
        }
    default:
      return ;
  }
}

function toArray(s) {
  return Array.from(s);
}

function parseHcl(s) {
  var isHex = function (c) {
    switch (c) {
      case "0" :
      case "1" :
      case "2" :
      case "3" :
      case "4" :
      case "5" :
      case "6" :
      case "7" :
      case "8" :
      case "9" :
      case "a" :
      case "b" :
      case "c" :
      case "d" :
      case "e" :
      case "f" :
          return true;
      default:
        return false;
    }
  };
  if (s.length === 7 && s.startsWith("#") && Belt_Array.every(Array.from(s.substr(1)), isHex)) {
    return {
            TAG: /* HairColor */4,
            _0: s
          };
  }
  
}

function parseEcl(s) {
  switch (s) {
    case "amb" :
    case "blu" :
    case "brn" :
    case "grn" :
    case "gry" :
    case "hzl" :
    case "oth" :
        return {
                TAG: /* EyeColor */5,
                _0: s
              };
    default:
      return ;
  }
}

function parsePid(s) {
  var isDigit = function (c) {
    switch (c) {
      case "0" :
      case "1" :
      case "2" :
      case "3" :
      case "4" :
      case "5" :
      case "6" :
      case "7" :
      case "8" :
      case "9" :
          return true;
      default:
        return false;
    }
  };
  if (s.length === 9 && Belt_Array.every(Array.from(s), isDigit)) {
    return {
            TAG: /* PassportId */6,
            _0: s
          };
  }
  
}

function make$1(p) {
  return Belt_Option.flatMap(parseByr(p.byr), (function (byr) {
                return Belt_Option.flatMap(parseIyr(p.iyr), (function (iyr) {
                              return Belt_Option.flatMap(parseEyr(p.eyr), (function (eyr) {
                                            return Belt_Option.flatMap(parseHgt(p.hgt), (function (hgt) {
                                                          return Belt_Option.flatMap(parseHcl(p.hcl), (function (hcl) {
                                                                        return Belt_Option.flatMap(parseEcl(p.ecl), (function (ecl) {
                                                                                      return Belt_Option.flatMap(parsePid(p.pid), (function (pid) {
                                                                                                    var cid = Belt_Option.map(p.cid, (function (x) {
                                                                                                            return {
                                                                                                                    TAG: /* CountryId */7,
                                                                                                                    _0: x
                                                                                                                  };
                                                                                                          }));
                                                                                                    return {
                                                                                                            byr: byr,
                                                                                                            iyr: iyr,
                                                                                                            eyr: eyr,
                                                                                                            hgt: hgt,
                                                                                                            hcl: hcl,
                                                                                                            ecl: ecl,
                                                                                                            pid: pid,
                                                                                                            cid: cid
                                                                                                          };
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

var ValidPassport = {
  parseByr: parseByr,
  parseIyr: parseIyr,
  parseEyr: parseEyr,
  parseHgt: parseHgt,
  toArray: toArray,
  parseHcl: parseHcl,
  parseEcl: parseEcl,
  parsePid: parsePid,
  make: make$1
};

function part1(input) {
  return Belt_Array.keepMap(Util.splitLines(input), make).length;
}

if (part1(sampleInput) !== 2) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Day04.re",
          192,
          0
        ],
        Error: new Error()
      };
}

if (part1(input) !== 222) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Day04.re",
          193,
          0
        ],
        Error: new Error()
      };
}

function part2(input) {
  return Belt_Array.keepMap(Belt_Array.keepMap(Util.splitLines(input), make), make$1).length;
}

var invalidSamples = "\"eyr:1972 cid:100 hcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926\niyr:2019 hcl:#602927 eyr:1967 hgt:170cm ecl:grn pid:012533040 byr:1946\nhcl:dab227 iyr:2012 ecl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277\nhgt:59cm ecl:zzz eyr:2038 hcl:74454a iyr:2023 pid:3556412378 byr:2007\"";

var validSamples = "\"pid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980 hcl:#623a2f\neyr:2029 ecl:blu cid:129 byr:1989 iyr:2014 pid:896056539 hcl:#a97842 hgt:165cm\nhcl:#888785 hgt:164cm byr:2001 iyr:2015 cid:88 pid:545766238 ecl:hzl eyr:2022\niyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719\"";

if (part2(invalidSamples) !== 0) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Day04.re",
          213,
          0
        ],
        Error: new Error()
      };
}

if (part2(validSamples) !== 4) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Day04.re",
          214,
          0
        ],
        Error: new Error()
      };
}

if (part2(sampleInput) !== 2) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Day04.re",
          215,
          0
        ],
        Error: new Error()
      };
}

if (part2(input) !== 140) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Day04.re",
          216,
          0
        ],
        Error: new Error()
      };
}

var let$dotopt = Belt_Option.flatMap;

exports.sampleInput = sampleInput;
exports.input = input;
exports.let$dotopt = let$dotopt;
exports.Passport = Passport;
exports.ValidPassport = ValidPassport;
exports.part1 = part1;
exports.part2 = part2;
exports.invalidSamples = invalidSamples;
exports.validSamples = validSamples;
/* input Not a pure module */
